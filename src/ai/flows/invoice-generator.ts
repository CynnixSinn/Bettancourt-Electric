// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for automatically generating professional invoices.
 *
 * - generateInvoice - A function that generates an invoice for a job.
 * - GenerateInvoiceInput - The input type for the generateInvoice function.
 * - GenerateInvoiceOutput - The return type for the generateInvoice function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateInvoiceInputSchema = z.object({
  customerInfo: z.object({
    name: z.string().describe('The name of the customer.'),
    address: z.string().describe('The address of the customer.'),
    email: z.string().email().describe('The email address of the customer.'),
    phone: z.string().describe('The phone number of the customer.'),
  }).describe('Customer contact information.'),
  jobSummary: z.string().describe('A summary of the job performed.'),
  partCosts: z.array(z.object({
    partName: z.string().describe('The name of the part.'),
    cost: z.number().describe('The cost of the part.'),
  })).describe('A list of parts and their costs.'),
  laborEstimate: z.number().describe('The estimated labor cost for the job.'),
  taxRate: z.number().describe('The tax rate to apply to the invoice (e.g., 0.08 for 8%).'),
}).describe('Details required to generate the invoice.');

export type GenerateInvoiceInput = z.infer<typeof GenerateInvoiceInputSchema>;

const GenerateInvoiceOutputSchema = z.object({
  invoice: z.string().describe('The generated invoice in a human-readable format.'),
  totalAmount: z.number().describe('The total amount due on the invoice, including tax.'),
}).describe('The generated invoice and total amount.');

export type GenerateInvoiceOutput = z.infer<typeof GenerateInvoiceOutputSchema>;

export async function generateInvoice(input: GenerateInvoiceInput): Promise<GenerateInvoiceOutput> {
  return generateInvoiceFlow(input);
}

const generateInvoicePrompt = ai.definePrompt({
  name: 'generateInvoicePrompt',
  input: {schema: GenerateInvoiceInputSchema},
  output: {schema: GenerateInvoiceOutputSchema},
  prompt: `You are an expert invoice generator. Given the following information, generate a professional invoice.

Customer Information:
Name: {{{customerInfo.name}}}
Address: {{{customerInfo.address}}}
Email: {{{customerInfo.email}}}
Phone: {{{customerInfo.phone}}}

Job Summary: {{{jobSummary}}}

Part Costs:
{{#each partCosts}}
- {{{partName}}}: \${{{cost}}}
{{/each}}

Labor Estimate: \${{{laborEstimate}}}

Tax Rate: {{{taxRate}}}

Calculate the total amount due, including tax, and present the invoice in a clear and professional format.
Include all provided information in the invoice.
Make sure the invoice includes a breakdown of all costs, including parts, labor, and tax.
`,
});

const generateInvoiceFlow = ai.defineFlow(
  {
    name: 'generateInvoiceFlow',
    inputSchema: GenerateInvoiceInputSchema,
    outputSchema: GenerateInvoiceOutputSchema,
  },
  async input => {
    const {output} = await generateInvoicePrompt(input);

    // Calculate total amount due including taxes
    const subtotal = input.partCosts.reduce((sum, part) => sum + part.cost, 0) + input.laborEstimate;
    const taxAmount = subtotal * input.taxRate;
    const totalAmount = subtotal + taxAmount;

    return {
      invoice: output!.invoice,
      totalAmount: totalAmount,
    };
  }
);

